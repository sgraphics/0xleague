// SPDX-License-Identifier: MIT
// This smart contract was auto-generated by Toolblox.net - The no-code smart-contract builder.
pragma solidity ^0.8.19;
import "https://raw.githubusercontent.com/Ideevoog/Toolblox.Token/main/Contracts/WorkflowBase.sol";
import "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/v4.9.3/contracts/access/Ownable.sol";
/*
	Toolblox smart-contract workflow: https://app.toolblox.net/summary/0xleague_audit_management
*/
contract AuditWorkflow  is WorkflowBase, Ownable{
	struct Audit {
		uint id;
		uint64 status;
		string name;
		address client;
		address auditor;
		string gitCommit;
		string telegramId;
		string nda;
		uint price;
		string image;
	}
	mapping(uint => Audit) public items;
	function _assertOrAssignClient(Audit memory item) private view {
		address client = item.client;
		if (client != address(0))
		{
			require(_msgSender() == client, "Invalid Client");
			return;
		}
		item.client = _msgSender();
	}
	function _assertOrAssignAuditor(Audit memory item) private view {
		address auditor = item.auditor;
		if (auditor != address(0))
		{
			require(_msgSender() == auditor, "Invalid Auditor");
			return;
		}
		item.auditor = _msgSender();
	}
	constructor()  {
		_transferOwnership(_msgSender());
	}
	function setOwner(address _newOwner) public {
		transferOwnership(_newOwner);
	}
/*
	Available statuses:
	0 Requested (owner Client)
	1 Offered (owner Client)
	2 In progress (owner Auditor)
	3 Completed (owner Client)
*/
	function _assertStatus(Audit memory item, uint64 status) private pure {
		require(item.status == status, "Cannot run Workflow action; unexpected status");
	}
	function getItem(uint256 id) public view returns (Audit memory) {
		Audit memory item = items[id];
		require(item.id == id, "Cannot find item with given id");
		return item;
	}
	function getLatest(uint256 cnt) public view returns(Audit[] memory) {
		uint256[] memory latestIds = getLatestIds(cnt);
		Audit[] memory latestItems = new Audit[](latestIds.length);
		for (uint256 i = 0; i < latestIds.length; i++) latestItems[i] = items[latestIds[i]];
		return latestItems;
	}
	function getPage(uint256 cursor, uint256 howMany) public view returns(Audit[] memory) {
		uint256[] memory ids = getPageIds(cursor, howMany);
		Audit[] memory result = new Audit[](ids.length);
		for (uint256 i = 0; i < ids.length; i++) result[i] = items[ids[i]];
		return result;
	}
	function getId(uint id) public view returns (uint){
		return getItem(id).id;
	}
	function getStatus(uint id) public view returns (uint64){
		return getItem(id).status;
	}
	function getName(uint id) public view returns (string memory){
		return getItem(id).name;
	}
	function getClient(uint id) public view returns (address){
		return getItem(id).client;
	}
	function getAuditor(uint id) public view returns (address){
		return getItem(id).auditor;
	}
	function getGitCommit(uint id) public view returns (string memory){
		return getItem(id).gitCommit;
	}
	function getTelegramId(uint id) public view returns (string memory){
		return getItem(id).telegramId;
	}
	function getNda(uint id) public view returns (string memory){
		return getItem(id).nda;
	}
	function getPrice(uint id) public view returns (uint){
		return getItem(id).price;
	}
	function getImage(uint id) public view returns (string memory){
		return getItem(id).image;
	}
/*
	### Transition: 'Request audit'
	This transition creates a new object and puts it into `Requested` state.
	
	#### Transition Parameters
	For this transition, the following parameters are required: 
	
	* `Auditor id` (Integer)
	* `Git commit` (Text)
	* `Telegram id` (Text)
	* `NDA` (Blob)
	
	#### Access Restrictions
	Access is specifically restricted to the user with the address from the `Client` property. If `Client` property is not yet set then the method caller becomes the objects `Client`.
	
	#### Checks and updates
	The following properties will be updated on blockchain:
	
	* `Git commit` (String)
	* `Telegram id` (String)
	* `NDA` (Blob)
*/
	function requestAudit(uint64 /*auditorId*/,string calldata gitCommit,string calldata telegramId,string calldata nda) external returns (uint256) {
		uint256 id = _getNextId();
		Audit memory item;
		item.id = id;
		items[id] = item;
		_assertOrAssignClient(item);
		item.gitCommit = gitCommit;
		item.telegramId = telegramId;
		item.nda = nda;
		item.status = 0;
		items[id] = item;
		emit ItemUpdated(id, item.status);
		return id;
	}
/*
	### Transition: 'Give offer'
	This transition begins from `Requested` and leads to the state `Offered`.
	
	#### Transition Parameters
	For this transition, the following parameters are required: 
	
	* `Id` (Integer) - Audit identifier
	* `Price` (Money)
	
	#### Access Restrictions
	Access is specifically restricted to the user with the address from the `Auditor` property. If `Auditor` property is not yet set then the method caller becomes the objects `Auditor`.
	
	#### Checks and updates
	The following properties will be updated on blockchain:
	
	* `Price` (Money)
*/
	function giveOffer(uint256 id,uint price) external returns (uint256) {
		Audit memory item = getItem(id);
		_assertOrAssignAuditor(item);
		_assertStatus(item, 0);
		item.price = price;
		item.status = 1;
		items[id] = item;
		emit ItemUpdated(id, item.status);
		return id;
	}
/*
	### Transition: 'Accept offer'
	This transition begins from `Offered` and leads to the state `In progress`.
	
	#### Access Restrictions
	Access is specifically restricted to the user with the address from the `Client` property. If `Client` property is not yet set then the method caller becomes the objects `Client`.
	
	#### Payment Process
	In the end a payment is made.
	A payment in the amount of `Price` is made from caller to the address specified in the `Auditor` property.
*/
	function acceptOffer(uint256 id) external payable returns (uint256) {
		Audit memory item = getItem(id);
		_assertOrAssignClient(item);
		_assertStatus(item, 1);

		item.status = 2;
		items[id] = item;
		emit ItemUpdated(id, item.status);
		uint deposit = msg.value;
		require(
			deposit >= item.price,
			"Not enough deposit"
		);
		uint moneyToReturn = deposit - item.price;
		if(moneyToReturn > 0)
		{
			payable(_msgSender()).transfer(moneyToReturn);
		}
		if (item.auditor != address(0) && item.price > 0){
			payable(item.auditor).transfer(item.price);
		}
		return id;
	}
/*
	### Transition: 'Reject offer'
	This transition begins from `Offered` and leads to the state `Requested`.
	
	#### Access Restrictions
	Access is specifically restricted to the user with the address from the `Client` property. If `Client` property is not yet set then the method caller becomes the objects `Client`.
	
	#### Checks and updates
	The following calculations will be done and updated:
	
	* `Price` = `0`
*/
	function rejectOffer(uint256 id) external returns (uint256) {
		Audit memory item = getItem(id);
		_assertOrAssignClient(item);
		_assertStatus(item, 1);
		item.price = 0;
		item.status = 0;
		items[id] = item;
		emit ItemUpdated(id, item.status);
		return id;
	}
/*
	### Transition: 'Complete audit'
	This transition begins from `In progress` and leads to the state `Completed`.
	
	#### Transition Parameters
	For this transition, the following parameters are required: 
	
	* `Id` (Integer) - Audit identifier
	* `Image` (Image)
	
	#### Access Restrictions
	Access is specifically restricted to the user with the address from the `Auditor` property. If `Auditor` property is not yet set then the method caller becomes the objects `Auditor`.
	
	#### Checks and updates
	The following properties will be updated on blockchain:
	
	* `Image` (Image)
*/
	function completeAudit(uint256 id,string calldata image) external returns (uint256) {
		Audit memory item = getItem(id);
		_assertOrAssignAuditor(item);
		_assertStatus(item, 2);
		item.image = image;
		item.status = 3;
		items[id] = item;
		emit ItemUpdated(id, item.status);
		return id;
	}
}